services:

    magento:
        depends_on:
            database:
                condition: service_healthy
        image: ${PHP_IMAGE_NAME}
        container_name: magento
        networks:
            - backend
        volumes:
            - 'html:${WEBSERVER_DOC_ROOT}'
            - type: bind
              source: ./php-fpm/php/conf.d/security.ini
              target: '${PHP_INI_DIR_PREFIX}/php/conf.d/security.ini'
            - type: bind
              source: ./php-fpm/php-fpm.d/z-www.conf
              target: '${PHP_INI_DIR_PREFIX}/php-fpm.d/z-www.conf'
            - type: bind
              source: ./packagecheck.sh
              target: '/tmp/packagecheck.sh'
        hostname: magento
        restart: unless-stopped
        ports:
            - '9000:80'
        links:
            - database
            - valkey
            - opensearch
        healthcheck:
            test: ["CMD-SHELL", "/bin/pidof php-fpm > /dev/null || exit 1"]
            interval: 5s
            timeout: 5s
            retries: 1000
        environment:
            TZ: '${LOCAL_TIMEZONE}'
        labels:
            - 'docker-volume-backup.stop-during-backup=true'
        command: >
            bash -c "apt-get update && sh /tmp/packagecheck.sh 'zip unzip golang git lsof' && curl -sSL https://github.com/mlocati/docker-php-extension-installer/releases/latest/download/install-php-extensions -o - | sh -s gd mysqli pdo_mysql intl zip xsl soap sockets bcmath opcache redis ftp && curl -sS https://getcomposer.org/installer | php && mv composer.phar /usr/local/bin/composer && 
            composer config -g http-basic.repo.magento.com ${PUBLIC_KEY} ${PRIVATE_KEY} && if [ \"$$(ls -A ${WEBSERVER_DOC_ROOT}/.user.ini)\" ]; then composer update --working-dir=${WEBSERVER_DOC_ROOT} && bin/magento setup:upgrade --keep-generated --magento-init-params=MAGE_DIRS[base][path]=${WEBSERVER_DOC_ROOT}; else rm -f ${WEBSERVER_DOC_ROOT}/README.md && go install github.com/mailhog/mhsendmail@latest && cp /root/go/bin/mhsendmail /usr/bin/mhsendmail && composer create-project --repository-url=https://repo.magento.com/ magento/project-community-edition:2.4.8 ${WEBSERVER_DOC_ROOT} && find var generated vendor pub/static pub/media app/etc -type f -exec chmod g+w {} +; find var generated vendor pub/static pub/media app/etc -type d -exec chmod g+ws {} +; chown -R :www-data . ; chmod u+x bin/magento; 
            bin/magento setup:install --base-url=https://${DOMAIN_NAME} --db-host=database --db-name=${DB_NAME} --db-user=${DB_USER} --db-password=${DB_PASSWORD} --admin-firstname=admin --admin-lastname=admin --admin-email=${LETSENCRYPT_EMAIL} --admin-user=admin --admin-password=admin123 --language=en_US --currency=USD --timezone=${LOCAL_TIMEZONE} --use-rewrites=1 --search-engine=opensearch --opensearch-host=opensearch --opensearch-port=9200 --opensearch-index-prefix=magento2 && bin/magento setup:config:set --cache-backend=redis --cache-backend-redis-server=valkey --http-cache-hosts=webserver; 
            bin/magento config:set --scope=default --scope-code=0 system/full_page_cache/caching_application 2 && bin/magento indexer:reindex; fi; grep -qxF 'date.timezone = ${LOCAL_TIMEZONE}' ${PHP_INI_DIR_PREFIX}/php/conf.d/security.ini || echo 'date.timezone = ${LOCAL_TIMEZONE}' >> ${PHP_INI_DIR_PREFIX}/php/conf.d/security.ini; php-fpm"

    webserver:
        depends_on:
            magento:
                condition: service_healthy
        image: nginx:stable
        container_name: webserver
        networks:
            - backend
            - frontend
        volumes:
            - 'html:${WEBSERVER_DOC_ROOT}'
            - type: bind
              source: ./webserver/nginx.conf
              target: '${NGINX_PREFIX}/nginx.conf'
            - type: bind
              source: ./webserver/templates/nginx.conf.template
              target: '${NGINX_PREFIX}/templates/default.conf.template'
            - type: bind
              source: ./webserver/ssl-option/options-ssl-nginx.conf
              target: '${LETSENCRYPT_CONF_PREFIX}/options-ssl-nginx.conf'
            - type: bind
              source: ./ssl-conf.sh
              target: '/tmp/ssl-conf.sh'
            - 'certbot-etc:${LETSENCRYPT_CONF_PREFIX}'
            - '/tmp/acme-challenge:/tmp/acme-challenge'
        hostname: webserver
        restart: unless-stopped
        ports:
            - '80:80'
            - '443:443'
            - '90:90'
            - '8090:8090'
        links:
            - mail
        environment:
            NGINX_HOST: ${DOMAIN_NAME}
            NGINX_PORT: 80
            TZ: '${LOCAL_TIMEZONE}'
        command: bash -c "/docker-entrypoint.sh nginx -v; sh /tmp/ssl-conf.sh '${DOMAIN_NAME}' '${LETSENCRYPT_CONF_PREFIX}' '${NGINX_PREFIX}'"

    certbot:
        depends_on:
            - varnish
        image: certbot/certbot:latest
        container_name: certbot
        networks:
            - backend
        volumes:
            - 'certbot-etc:${LETSENCRYPT_CONF_PREFIX}'
            - 'certbot-var:/var/lib/letsencrypt'
            - '/tmp/acme-challenge:/tmp/acme-challenge'
        restart: unless-stopped
        healthcheck:
            test: ["CMD-SHELL", "test -d ${LETSENCRYPT_CONF_PREFIX}/live/${DOMAIN_NAME} || exit 1"]
            interval: 5s
            timeout: 5s
            retries: 20
        environment:
            TZ: '${LOCAL_TIMEZONE}'
        entrypoint: /bin/sh -c "${SSL_SNIPPET}; trap exit TERM; while :; do certbot renew --dry-run; sleep 12h & wait $${!}; done;"

    phpmyadmin:
        depends_on:
            certbot:
                condition: service_healthy
        image: phpmyadmin:latest
        container_name: phpmyadmin
        networks:
            - backend
            - frontend
        volumes:
            - type: bind
              source: ./phpmyadmin/apache2/sites-available/default-ssl.conf
              target: '${APACHE_CONFDIR_PREFIX}/sites-available/default-ssl.conf'
            - type: bind
              source: ./phpmyadmin/apache2/ports.conf
              target: '${APACHE_CONFDIR_PREFIX}/ports.conf'
            - type: bind
              source: ./phpmyadmin/ssl-option/options-ssl-apache.conf
              target: '${LETSENCRYPT_CONF_PREFIX}/options-ssl-apache.conf'
            - type: bind
              source: ./phpmyadmin/config.user.inc.php
              target: '${PMA_CONF_FOLDER}/config.user.inc.php'
            - type: bind
              source: ./phpmyadmin/php/conf.d/security.ini
              target: '${PHP_INI_DIR_PREFIX}/php/conf.d/security.ini'
            - 'certbot-etc:${LETSENCRYPT_CONF_PREFIX}'
        hostname: phpmyadmin
        restart: unless-stopped
        ports:
            - '9090:443'
        links:
            - database
        environment:
            PMA_HOST: 'database'
            PMA_PMADB: 'phpmyadmin'
            PMA_CONTROLUSER: '${PMA_CONTROLUSER}'
            PMA_CONTROLPASS: '${PMA_CONTROLPASS}'
            MYSQL_ROOT_PASSWORD: '${MYSQL_ROOT_PASSWORD}'
            UPLOAD_LIMIT: '${PMA_UPLOAD_LIMIT}'
            MEMORY_LIMIT: '${PMA_MEMORY_LIMIT}'
            TZ: '${LOCAL_TIMEZONE}'
        command: >
            bash -c "echo ${PMA_HTPASSWD_USERNAME}:phpmyadmin:$$( printf \"%s:%s:%s\" \"${PMA_HTPASSWD_USERNAME}\" \"phpmyadmin\" \"${PMA_HTPASSWD_PASSWORD}\" | md5sum | awk '{print $$1}' ) > ${PMA_CONF_FOLDER}/.htpasswd 
            && printf 'AuthType Digest\\nAuthName \"phpmyadmin\"\\nAuthDigestProvider file\\nAuthUserFile ${PMA_CONF_FOLDER}/.htpasswd\\nRequire valid-user\\n' > ${WEBSERVER_DOC_ROOT}/.htaccess && a2enmod auth_digest; 
            mkdir -p ${WEBSERVER_DOC_ROOT}/../upload && chown www-data:www-data ${WEBSERVER_DOC_ROOT}/../upload && chmod a+w ${WEBSERVER_DOC_ROOT}/../upload; mkdir -p ${WEBSERVER_DOC_ROOT}/../save && chown www-data:www-data ${WEBSERVER_DOC_ROOT}/../save && chmod a+w ${WEBSERVER_DOC_ROOT}/../save; 
            grep -qxF 'ServerName 127.0.0.1' ${APACHE_CONFDIR_PREFIX}/apache2.conf || echo -e '\\nServerName 127.0.0.1' >> ${APACHE_CONFDIR_PREFIX}/apache2.conf; grep -qxF 'date.timezone = ${LOCAL_TIMEZONE}' ${PHP_INI_DIR_PREFIX}/php/conf.d/security.ini || echo 'date.timezone = ${LOCAL_TIMEZONE}' >> ${PHP_INI_DIR_PREFIX}/php/conf.d/security.ini; 
            a2enmod ssl && a2ensite default-ssl && a2dissite 000-default && /docker-entrypoint.sh 'apache2-foreground'"

    database:
        depends_on:
            - opensearch
            - valkey
            - mail
        image: ${DATABASE_IMAGE_NAME}:${DATABASE_VERSION}
        container_name: database
        networks:
            - backend
        volumes:
            - 'db:/var/lib/mysql'
            - 'db-backup-data:/tmp/backup'
            - type: bind
              source: ./database/conf.d/z-${DATABASE_IMAGE_NAME}.cnf
              target: '${MYSQL_CONF_PREFIX}/z-${DATABASE_IMAGE_NAME}.cnf'
            - 'phpmyadmin-sql:/docker-entrypoint-initdb.d'
        hostname: database
        restart: unless-stopped
        ports:
            - '3306:3306'
        healthcheck:
            test: ["CMD-SHELL", "${DATABASE_ADMIN_COMMANDLINE} ping --silent || exit 1"]
            interval: 5s
            timeout: 5s
            retries: 50
        environment:
            MYSQL_ROOT_PASSWORD: '${MYSQL_ROOT_PASSWORD}'
            MYSQL_DATABASE: '${DB_NAME}'
            MYSQL_USER: '${DB_USER}'
            MYSQL_PASSWORD: '${DB_PASSWORD}'
            MYSQL_ALLOW_EMPTY_PASSWORD: 'No'
            MYSQL_ROOT_HOST: '${MYSQL_ROOT_HOST}'
            TZ: '${LOCAL_TIMEZONE}'
        labels:
            - "docker-volume-backup.stop-during-backup=true"
            - "docker-volume-backup.archive-pre=/bin/sh -c 'mysqldump -uroot -p${MYSQL_ROOT_PASSWORD} --all-databases > /tmp/backup/db_backup_data.sql'"
            - "docker-volume-backup.exec-label=database"
        command: bash -c "${DATABASE_PACKAGE_MANAGER} && chmod 0444 ${MYSQL_CONF_PREFIX}/z-${DATABASE_IMAGE_NAME}.cnf && export PMA_CONTROLUSER=${PMA_CONTROLUSER} export PMA_CONTROLPASS=${PMA_CONTROLPASS} && envsubst '$$PMA_CONTROLUSER,$$PMA_CONTROLPASS' < /docker-entrypoint-initdb.d/create_tables.sql.template > /docker-entrypoint-initdb.d/create_tables.sql && docker-entrypoint.sh --character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci"

    valkey:
        image: valkey/valkey:latest
        container_name: valkey
        networks:
            - backend
        volumes:
            - 'dtvalkey:/data'
            - type: bind
              source: ./valkey
              target: '${VALKEY_CONF_PREFIX}/valkey'
        hostname: valkey
        sysctls:
            - net.core.somaxconn=512
        restart: unless-stopped
        ports:
            - '6379:6379'
        environment:
            ALLOW_EMPTY_PASSWORD: 'yes'
            TZ: '${LOCAL_TIMEZONE}'
        command: "valkey-server ${VALKEY_CONF_PREFIX}/valkey/valkey.conf"

    varnish:
        depends_on:
            - webserver
        image: varnish:${VARNISH_VERSION}
        container_name: varnish
        networks:
            - backend
        volumes:
            - type: bind
              source: ./varnish/default.vcl
              target: '${VARNISH_CONF_PREFIX}/default.vcl'
        hostname: varnish
        tmpfs:
            - /var/lib/varnish:exec
        restart: unless-stopped
        ports:
            - '8080:80'
        ulimits:
            memlock:
                 soft: -1
                 hard: -1
        environment:
            VARNISH_SIZE: '${VARNISH_SIZE}'
            TZ: '${LOCAL_TIMEZONE}'
        command: "-a http=:8080,HTTP -p default_ttl=3600 -n /tmp/varnish_workdir"

    opensearch:
        image: opensearchproject/opensearch:2.19.2
        container_name: opensearch
        networks:
            - backend
        hostname: opensearch
        restart: unless-stopped
        ports:
            - '9200:9200'
            - '9600:9600'
        ulimits:
            memlock:
                soft: -1
                hard: -1
            nofile:
                soft: 65536
                hard: 65536
        environment:
            discovery.type: 'single-node'
            bootstrap.memory_lock: true
            DISABLE_INSTALL_DEMO_CONFIG: true
            DISABLE_SECURITY_PLUGIN: true
            OPENSEARCH_JAVA_OPTS: '-Xms512m -Xmx512m'
            TZ: '${LOCAL_TIMEZONE}'
        #command: sh -c "elasticsearch-plugin list | grep -q analysis-icu || yes | elasticsearch-plugin install analysis-icu && elasticsearch-plugin list | grep -q analysis-phonetic || yes | elasticsearch-plugin install analysis-phonetic; /usr/local/bin/docker-entrypoint.sh 'eswrapper'"

    mail:
        image: mailhog/mailhog:latest
        container_name: mail
        networks:
            - backend
        hostname: mail
        restart: unless-stopped
        ports:
            - '1025:1025'
            - '8025:8025'
        environment:
            MH_HOSTNAME: 'mail.${DOMAIN_NAME}'
            MH_AUTH_FILE: '${DOMAIN_NAME}-auth'
        entrypoint: sh -c "echo ${PMA_HTPASSWD_USERNAME}:$(MailHog bcrypt ${PMA_HTPASSWD_PASSWORD}) > ${DOMAIN_NAME}-auth && MailHog"

    backup:
        image: offen/docker-volume-backup:latest
        container_name: backup
        networks:
            - backend
        volumes:
            - 'html:/backup/html:ro'
            - 'db:/backup/db:ro'
            - 'db-backup-data:/backup/db-backup-data:ro'
            - '/var/run/docker.sock:/var/run/docker.sock:ro'
            - type: bind
              source: ./backups
              target: /archive
        hostname: backup
        restart: unless-stopped
        environment:
            BACKUP_CRON_EXPRESSION: '20 01 * * *'
            BACKUP_FILENAME: 'backup-%Y-%m-%dT%H-%M-%S.tar.gz'
            BACKUP_RETENTION_DAYS: '7'
            EXEC_LABEL: 'database'
            #BACKUP_EXCLUDE_REGEXP: 'folder|folder|file|\\.log$$'

networks:
    backend: null
    frontend: null

volumes:
    html:
        name: magento-html
        driver: local
        driver_opts:
            type: none
            device: ${DIRECTORY_PATH}/magento
            o: bind
    db:
        name: ${DATABASE_CONT_NAME}-data
    db-backup-data:
        name: ${DATABASE_CONT_NAME}-backup-data
    phpmyadmin-sql:
        name: phpmyadmin-sql
        driver: local
        driver_opts:
            type: none
            device: ${DIRECTORY_PATH}/database/phpmyadmin/sql
            o: bind
    dtvalkey:
        name: valkey-data
    certbot-etc:
        external: true
    certbot-var:
        name: certbot-var
